import java.io.IOException;
import java.math.BigInteger;

/**
 * Created by grantmcgovern on 1/24/15.
 */

public class Main {
    public static void main(String[] args) throws IOException {
        RSA rsa = new RSA(1048, "privateKey.txt", "publicKey.txt");

//        /* Apply a simple padding scheme to encode message */
//        String message = "grant is very cool";
//        System.out.println("Original Message: " + message);
//
//        BigInteger encodedMessage = rsa.paddingScheme(message);
//        System.out.println("Encoded Message: " + encodedMessage);
//
//        String decoded = rsa.depaddingScheme(encodedMessage);
//        System.out.println("Decoded Message (Test): " + decoded);
//
//        BigInteger publicKey = rsa.e;
//        BigInteger N = rsa.N;
//
//        BigInteger NN = new BigInteger("16102579288388533777909290012610665260032597209307216040137484283597544244669940196564346793396866965184246241699922959239384340911714272398279759370865851669125982544466347720184672949556407374137661092575466311145275078638778313869108053588463348523690810819680590245623646745585252280544065847215934636953014250078923054474792830936015562861765815446111450759944214467677615001165700603861114072504417710021881166636362982490486612362344822067147010339756362868987729078755550322868754724312337671764559436413696083512887244358362747278005369112776779113364534024984120113214277849821337338922958027026876006867643");
//
//
//        BigInteger encryptedMessage = rsa.encrypt(encodedMessage, N, publicKey);
//        System.out.println("Encrypted Message: " + encryptedMessage);
//
//        //encryptedMessage = new BigInteger("2216052557000060414707694116456812908723780528639431401289200053722601821380167881819710702819028469301688124655132594555811830220268319411272338017416205774486937302700697332906544526406117038256948687996522123547804859608816558506448143534927161945029420300402571856267623870968553701829525907561460222779143661213008158243671496254114848281322119769883355413549683818305902515867414401515243655599495455952529798467849688304126241200558008543115239932801429013016802212471357480462460380014728448186064254237207172748318267748207398655373950710117702537239255064255468300635079034090285965604491525241011939773273842807077237853");
//        BigInteger decryptedMessage = rsa.decrypt(encryptedMessage);
//        System.out.println("Decrypted Message: " + decryptedMessage);
//        
//        String decodedMessage = rsa.depaddingScheme(decryptedMessage);
//        System.out.println("Decoded Message: " + decodedMessage);
        
//        BigInteger nn = new BigInteger("11461333124726711239531040055637535717390131643199798783444612711695595028459262246735301450591099021688802341859343013422752299856112765979028998155376952373616532306719714020517044495320645104344758623926552388983130168274564365262269741036147637926748760954687337281873709308705225345078308160297742397883067831789727310236667201133162237550028512822515761664706695170058101405971702350600132699974061911763040866169733706817108009396423495650601007970032314991637369291548345977633608455798693263517873293023084476770700002899985275174074677672266410704503206311867689360273371363083829143464404691471031621259557");
//        BigInteger pubKey = new BigInteger("13105631767152424479112048249918892529465046527243257723531314996602014508893902621035568683849477837588149099214047188887617660666984090963260672843231434860363921684424681918887856430338637208631612481767793554068821704388509784182894915427277118232958706701936534575313996920732180790079614228190959803115970880765773770481154868006789452663531547383469866300304541525043655946305802467312018901931854164977946720458516049629526367721449519242367927445585119170053034375368777712112191351532952440497939583077418129523877569479665896263069554541312550273144941243806156717143251346028039520191481312869678141097191");
//
//        String message = "george schmitz";
//        BigInteger encode = rsa.paddingScheme(message);
//        BigInteger res = rsa.encrypt(encode, nn, pubKey);
//        System.out.println(res);
//        RSA rsa = new RSA("privatekeytest.txt");
//        BigInteger result = rsa.decrypt(new BigInteger("5093757500810991540904254627443134324619987979712883157027651221997294589104016735182199811269951987443191111613780820649999762550115365398220918964934321802260676335117788851239480038685021219032287117475881021896582063404729610617495330355759115420418580595741455179259219742373234738570561225635384427573945460850090801208387631040071126587401041106015743016452106819183294076702321763392781571088956719293542898358220128563008227257764434689452026133520287122462446966084734384984020318985511195413593634672473667355352589627093629720705647147499447118042209031495446220428034929306931796104024259346382717762651"));
//        String decodedMessage = rsa.depaddingScheme(result);
//
//        System.out.println("Decoded Message: " + decodedMessage);
    }
}
